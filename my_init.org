* Credits
  My init config is based on the setup of the following people. Many thanks for their
  contribution to the community.
  - Protesilaos Stavrou [[https://protesilaos.com/dotemacs/][Prot's setup]]
  - Bozhidar Batsov [[https://github.com/bbatsov/emacs.d][Bozhidar's setup]]
  - Mike Zamansky [[https://github.com/zamansky/dot-emacs][Mike's setup]]

* Prerequisits (on OS X)
  - fira code font -> brew
  - all the fonts
  - JDK -> oracle?
  - set JAVA HOME
  - libvterm
  - cmake -> brew, needed by libvterm
  - ispell
* Interoperability
** Hash key on Mac, UK keyboard
   #+begin_src emacs-lisp
(global-set-key (kbd "M-3") '(lambda () (interactive) (insert "#")))
   #+end_src

** Make Emacs app aware of shell environment on OSX: exec-path-from-shell
   #+begin_src emacs-lisp
(use-package exec-path-from-shell)

(exec-path-from-shell-copy-env "PYTHONPATH")
(exec-path-from-shell-copy-env "JAVA_HOME")

(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
   #+end_src

** More compatible terminal emulator: vterm
   #+begin_src emacs-lisp
      (use-package vterm)
   #+end_src

* Package management
** Keep packages update
   #+begin_src emacs-lisp
(use-package auto-package-updated
  :config
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe))
   #+end_src

* Completions
** Completion: ivy, swiper, counsel
   #+begin_src emacs-lisp
 (use-package counsel
 :diminish (counsel-mode ivy-mode)
   :config 
   (ivy-mode 1)
   (setq ivy-use-virtual-buffers t)   ; recent files to ivy-switch-buffer
   (setq ivy-count-format "%d/%d ")   ; curr and total nb
:bind ("C-s" . swiper-isearch))
(counsel-mode 1)
   #+end_src

** More info for ivy: ivy-rich
   #+begin_src emacs-lisp
      (use-package ivy-rich
      :config (ivy-rich-mode 1)
      (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
   #+end_src

** Autocomplete: company
   #+begin_src emacs-lisp
 (use-package company
   :diminish
   :config (global-company-mode))
   #+end_src
** Completion heuristics: prescient
   #+begin_src  emacs-lisp
      (use-package ivy-prescient
      :config (ivy-prescient-mode 1)
      :after counsel)

      (use-package company-prescient
      :config (company-prescient-mode 1))

      (prescient-persist-mode 1) ; persist between sessions
   #+end_src
** Snippets
   #+begin_src emacs-lisp
(use-package yasnippet
:diminish yas
:config (yas-global-mode 1))

(use-package yasnippet-snippets :diminish)

   #+end_src
** Which key
   #+begin_src emacs-lisp
(use-package which-key
:diminish
:config (which-key-mode 1)
(setq which-key-idle-delay 0.2))
   #+end_src

* Navigation
** Jump to text tokens: avy
   #+begin_src emacs-lisp
(use-package avy
:diminish
:bind (
("M-g c" . avy-goto-char)
("M-g p" . avy-goto-char-2)
("M-g w" . avy-goto-word-1)
("M-g l" . avy-goto-line)))
   #+end_src

** Window manager: ace-window
   #+begin_src emacs-lisp
(use-package ace-window
:bind ("M-o" . ace-window))
   #+end_src
** Filesystem tree view: treemacs
   #+begin_src emacs-lisp
(use-package treemacs)

(use-package treemacs-projectile
:after treemacs projectile)

(use-package treemacs-icons-dired
:after treemacs dired
:config (treemacs-icons-dired-mode))

(use-package treemacs-magit
:after treemacs magit)

   #+end_src
** Folding: origami
   #+begin_src emacs-lisp
(use-package origami
:diminish
:config (global-origami-mode))
   #+end_src
* Org
** Org config
   #+begin_src emacs-lisp
(use-package org
:bind (
("C-c l" . org-store-link)
("C-c a" . org-agenda)
("C-c c" . org-capture)))
   #+end_src
** Bullets
   #+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :hook (org-mode-hook . org-bullets-mode))
   #+END_SRC

* Eye candy
** All the icons
   #+begin_src emacs-lisp
(use-package all-the-icons)
   #+end_src
** Doom themes
   #+begin_src emacs-lisp
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)
  
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
   #+end_src

** Sublime themes
   #+begin_src emacs-lisp
(use-package sublime-themes)
   #+end_src
** Doom modeline
   #+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1))

;; How tall the mode-line should be. It's only respected in GUI.
;; If the actual char height is larger, it respects the actual height.
(setq doom-modeline-height 20)

;; How wide the mode-line bar should be. It's only respected in GUI.
(setq doom-modeline-bar-width 3)

;; The limit of the window width.
;; If `window-width' is smaller than the limit, some information won't be displayed.
(setq doom-modeline-window-width-limit fill-column)

;; How to detect the project root.
;; The default priority of detection is `ffip' > `projectile' > `project'.
;; nil means to use `default-directory'.
;; The project management packages have some issues on detecting project root.
;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
;; to hanle sub-projects.
;; You can specify one if you encounter the issue.
(setq doom-modeline-project-detection 'project)

(setq doom-modeline-buffer-file-name-style 'auto)

;; Whether display icons in the mode-line.
;; While using the server mode in GUI, should set the value explicitly.
(setq doom-modeline-icon (display-graphic-p))

;; Whether display the icon for `major-mode'. It respects `doom-modeline-icon'.
(setq doom-modeline-major-mode-icon t)

;; Whether display the colorful icon for `major-mode'.
;; It respects `all-the-icons-color-icons'.
(setq doom-modeline-major-mode-color-icon t)

;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
(setq doom-modeline-buffer-state-icon t)

;; Whether display the modification icon for the buffer.
;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
(setq doom-modeline-buffer-modification-icon t)

;; Whether display the minor modes in the mode-line.
(setq doom-modeline-minor-modes t)

;; If non-nil, only display one number for checker information if applicable.
(setq doom-modeline-checker-simple-format t)

;; The maximum number displayed for notifications.
(setq doom-modeline-number-limit 99)

;; The maximum displayed length of the branch name of version control.
(setq doom-modeline-vcs-max-length 12)

;; Whether display the workspace name. Non-nil to display in the mode-line.
(setq doom-modeline-workspace-name t)

;; Whether display the perspective name. Non-nil to display in the mode-line.
(setq doom-modeline-persp-name t)

;; If non nil the default perspective name is displayed in the mode-line.
(setq doom-modeline-display-default-persp-name nil)

;; If non nil the perspective name is displayed alongside a folder icon.
(setq doom-modeline-persp-icon t)

;; Whether display the `lsp' state. Non-nil to display in the mode-line.
(setq doom-modeline-lsp t)

;; Whether display the modal state icon.
;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
(setq doom-modeline-modal-icon t)

;; Whether display the environment version.
(setq doom-modeline-env-version t)

   #+end_src
** Modus themes
   #+begin_src emacs-lisp
(use-package modus-operandi-theme)
(use-package modus-vivendi-theme)
   #+end_src
** Iconcs for company: company-box
   #+begin_src emacs-lisp
(use-package company-box
  :hook (company-mode . company-box-mode)
  :after company-mode)
   #+end_src

* Generic settings
** UI
   #+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)  ; no menu bar
(tool-bar-mode -1)  ; no tool bar
(when (boundp 'scroll-bar-mode) ; no scroll bar
 (scroll-bar-mode -1))
(add-to-list 'default-frame-alist '(fullscreen . maximized)) ; start maximized
(setq inhibit-splash-screen t) ; no splash screen
(setq visible-bell t) ; no audio bell
(set-face-attribute 'default nil :font "Fira Code Retina" :height 130)
(load-theme 'modus-vivendi t)
(column-number-mode) ; show col nr in mode line
(global-hl-line-mode) ; highlight current line
(set-cursor-color 'orange)
(set-face-background hl-line-face "gray10")
   #+END_SRC
** Preferences
   #+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
(show-paren-mode 1) ; highlight matching parenthesis
(setq display-line-numbers 'relative)
   #+end_src
* Emacs customizations
** Dired
   #+begin_src emacs-lisp
(setq delete-by-moving-to-trash t)
   #+end_src
** Modeline
*** Control display of minor modes in the modeline: diminish
    #+begin_src emacs-lisp
  (use-package diminish
  :after use-package)
    #+end_src
** Better help: helpful
   #+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
   #+end_src
* Programming
** General config
   #+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode) ; display line nr in code buffers
   #+end_src
** Ergonomics
*** maintain indentation
    #+begin_src emacs-lisp
(use-package aggressive-indent
:diminish
:config (global-aggressive-indent-mode -1))
    #+end_src
*** rainbow parens
    #+begin_src emacs-lisp
(use-package rainbow-delimiters)
    #+end_src
** LISP dialects structural editing: lispy
   #+begin_src emacs-lisp
(use-package lispy
:hook (emacs-lisp-mode-hook . (lambda () (lispy-mode 1))))
   #+end_src
** Language Server Protocol
   #+begin_src emacs-lisp
(setq lsp-keymap-prefix "C-c l")

(use-package lsp-mode
:hook ((prog-mode . lsp)
(lsp-mode . lsp-enable-which-key-integration))
:commands lsp
:after flycheck)

(use-package lsp-ui
:commands lsp-ui-mode)

(use-package lsp-ivy
:commands lsp-ivy-workspace-symbol)

(use-package lsp-treemacs
:commands lsp-treemacs-errors-list
:config (lsp-treemacs-sync-mode 1))

(use-package company-lsp)
   #+end_src

** Syntax checking: flycheck
   #+begin_src emacs-lisp
(use-package flycheck
  :ensure t
:diminish
  :init (global-flycheck-mode))
   #+end_src
** Languages
*** Clojure
    #+begin_src emacs-lisp
(use-package cider)
    #+end_src

*** Python
*** Scala
    #+begin_src emacs-lisp
(use-package scala-mode
  :mode "\\.sc\\'" 
  :interpreter
    ("scala" . scala-mode))

(use-package sbt-mode
  :commands sbt-start sbt-command)

(use-package lsp-metals
  :config (setq lsp-metals-treeview-show-when-views-received t))
    #+end_src

*** Java
    #+begin_src emacs-lisp
(use-package lsp-java
:hook (java-mode-hook . lsp))
    #+end_src

** Debugging
   #+begin_src emacs-lisp
(use-package posframe) ; requires by dap

(use-package dap-mode
  :hook
  (lsp-mode . dap-mode)
  (lsp-mode . dap-ui-mode))
   #+end_src

* Project tools
** Source control: magit
   #+begin_src emacs-lisp
(use-package magit
  :bind ("C-c g" . magit-status))
   #+end_src
** Working with repos: projectile
   #+begin_src emacs-lisp
  (use-package projectile
  :bind ("C-c p" . projectile-command-map)
  :init (projectile-mode 1)
  :after ivy)

  (setq projectile-completion-system 'ivy)
   #+end_src
** Feedback for lines changed: git-gutter+
   #+begin_src emacs-lisp
(use-package git-gutter+
:diminish
:config (global-git-gutter+-mode))
   #+end_src
* Typing productivity
** Modal subsequent commands: hydra
   #+begin_src emacs-lisp
(use-package hydra
:diminish)
   #+end_src
** Expand selection: expand-region
   #+begin_src emacs-lisp
(use-package expand-region
:diminish
:bind ("C-=" . er/expand-region))
   #+end_src

** Multiple cursors
   #+begin_src emacs-lisp
(use-package multiple-cursors
:bind (
("C-c m" . mc/edit-lines)
("C->" . mc/mark-next-like-this)
("C-<" . mc/mark-previous-like-this)
("C-c >" . mc/mark-all-like-this)
))
   #+end_src
* Packagesg to explore
  - ivy-postframe
  - general
  - orderless
  - smerge
  - helm
  - lispy
  - live python
  - org-html-themes
  - elpy
  - expand-region
  - web-mode
  - noflet
  - eglot
  - ripgrep (rg)
  - origami
  - magit forge
  - restclient
  - dumb-jump
  - try
  - auto-yasnippet
  - org-msg
  - smartparens
  - beacon
  - silversearcher
  - eyebrowse
  - ag
  - wgrep
  - anzu
  - fzf
  - darkroom
  - org-tree-slide
  - org-superstar
  - emmet
  - org-roam
  - pcre2el
  - virtualenvwrapper
  - all-the-icons-ivy
  - all-the-icons-dired
  - dired-subtree
  - dired-narrow
  - iedit
  - hydra
  - git-timemachine
  - try
  - jedi
  - dap
  - exec-path-from-shell
  - flyspell
  - hl-line+
  - rg
* TODO Issues
  - yasnippets snippets
  - company-box
  - diminish yas
