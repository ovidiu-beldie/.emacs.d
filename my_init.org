* Credits
My init config is based on the setup of the following people. Many thanks for their
contribution to the community.
- Protesilaos Stavrou [[https://protesilaos.com/dotemacs/][Prot's setup]]
- Bozhidar Batsov [[https://github.com/bbatsov/emacs.d][Bozhidar's setup]]
- Mike Zamansky [[https://github.com/zamansky/dot-emacs][Mike's setup]]

* Prerequisits (on OS X)
- fira code font -> brew
- all the fonts
- JDK -> oracle?
- set JAVA HOME
- libvterm
- cmake -> brew, needed by libvterm
- ispell
- ripgrep
* Interoperability
** Hash key on Mac, UK keyboard
#+begin_src emacs-lisp
  (global-set-key (kbd "M-3") '(lambda () (interactive) (insert "#")))
#+end_src

** Make Emacs app aware of shell environment on OSX: exec-path-from-shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell)

  (exec-path-from-shell-copy-env "PYTHONPATH")
  (exec-path-from-shell-copy-env "JAVA_HOME")

  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+end_src

** More compatible terminal emulator: vterm
#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

* Package management
** Update GPG keys for ELPA
This solves the issue of the key being updated and preventing the
installation/update of packages.
#+begin_src emacs-lisp
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (use-package gnu-elpa-keyring-update)
#+end_src

* Completions
** Vertico (vertical buffer completions)
savehist saves history over sessions
#+begin_src emacs-lisp
  (use-package vertico
    :init (vertico-mode))

  (use-package savehist
    :init (savehist-mode))
#+end_src

** Consult
#+begin_src emacs-lisp
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
	   ("C-c h" . consult-history)
	   ("C-c m" . consult-mode-command)
	   ("C-c k" . consult-kmacro)
	   ;; C-x bindings (ctl-x-map)
	   ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	   ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	   ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	   ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	   ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
	   ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
	   ;; Custom M-# bindings for fast register access
	   ("M-#" . consult-register-load)
	   ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	   ("C-M-#" . consult-register)
	   ;; Other custom bindings
	   ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	   ("<help> a" . consult-apropos)            ;; orig. apropos-command
	   ;; M-g bindings (goto-map)
	   ("M-g e" . consult-compile-error)
	   ("M-g f" . consult-flycheck)               ;; Alternative: consult-flycheck
	   ("M-g g" . consult-goto-line)             ;; orig. goto-line
	   ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	   ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	   ("M-g m" . consult-mark)
	   ("M-g k" . consult-global-mark)
	   ("M-g i" . consult-imenu)
	   ("M-g I" . consult-imenu-multi)
	   ;; M-s bindings (search-map)
	   ("M-s d" . consult-find)
	   ("M-s D" . consult-locate)
	   ("M-s g" . consult-grep)
	   ("M-s G" . consult-git-grep)
	   ("M-s r" . consult-ripgrep)
	   ("M-s l" . consult-line)
	   ("M-s L" . consult-line-multi)
	   ("M-s m" . consult-multi-occur)
	   ("M-s k" . consult-keep-lines)
	   ("M-s u" . consult-focus-lines)
	   ;; Isearch integration
	   ("M-s e" . consult-isearch-history)
	   :map isearch-mode-map
	   ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	   ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	   ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	   ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
	   ;; Minibuffer history
	   :map minibuffer-local-map
	   ("M-s" . consult-history)                 ;; orig. next-matching-history-element
	   ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
	  register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
	  xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config
    (recentf-mode 1)

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    )
#+end_src

** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
	   :map minibuffer-local-map
	   ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src

** Embark
#+BEGIN_SRC emacs-lisp
  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC

** Autocomplete: company
#+begin_src emacs-lisp
  (use-package company
    :diminish
    :config (global-company-mode))

  (use-package company-prescient
    :config
    (company-prescient-mode 1)
    (prescient-persist-mode 1) ;; persist between sessions
    )


  (use-package company-terraform
    :diminish
    :config (company-terraform-init))
#+end_src

** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish
    :config
    (yas-global-mode 1)
    (setq yas-snippet-dir "~/.emacs.d/elpa/yasnippet-snippets-1.0/snippets")
    )

  (use-package yasnippet-snippets
    :diminish)

#+end_src

** Which key
#+begin_src emacs-lisp
  (use-package which-key
    :diminish
    :config (which-key-mode 1)
    (setq which-key-idle-delay 0.2))
#+end_src

* Navigation
** Jump to text tokens: avy
#+begin_src emacs-lisp
  (use-package avy
    :diminish
    :bind (
	   ("M-g c" . avy-goto-char)
	   ("M-g p" . avy-goto-char-2)
	   ("M-g w" . avy-goto-word-1)
	   ("M-g l" . avy-goto-line)))
#+end_src

** Window manager: ace-window
#+begin_src emacs-lisp
  (use-package ace-window
    :bind ("M-o" . ace-window))
#+end_src

** Filesystem tree view: treemacs
#+begin_src emacs-lisp
  (use-package treemacs)

  (use-package treemacs-projectile
    :after treemacs projectile)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit)

#+end_src

** Folding: origami
#+begin_src emacs-lisp
  (use-package origami
    :diminish
    :config (global-origami-mode))
#+end_src
* Org
** Org config
#+begin_src emacs-lisp
  (use-package org
    :bind (
	   ("C-c l" . org-store-link)
	   ("C-c a" . org-agenda)
	   ("C-c c" . org-capture))
    :config
    (setq org-ellipsis " \u25bc"
	  org-hide-emphasis-markers t)
    )

  (dolist (face '((org-level-1 . 1.25)
		    (org-level-2 . 1.20)
		    (org-level-3 . 1.15)
		    (org-level-4 . 1.1)
		    (org-level-5 . 1.1)
		    (org-level-6 . 1.0)
		    (org-level-7 . 1.0)
		    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :font "Monaco" :weight 'medium :height (cdr face)))
#+end_src

** Bullets
#+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :after org
      :hook (org-mode-hook . org-bullets-mode)
      :custom (org-bullets-bullet-list '("\u2780" "\u2781" "\u2782" "\u2783" "\u2784" "\u2785" "/u2786" "\u2787")))
#+END_SRC

** Roam

Doesn't work out of the box on macOS Monterey, times out when trying to access
the emacsql DB.
The solution was to use emacsql-sqlite3.

#+BEGIN_SRC emacs-lisp

  (use-package emacsql-sqlite3)

  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)
    (setq org-roam-database-connector 'sqlite3)
    :custom
    (org-roam-directory "~/cwt/notes/roam")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert)
	   :map org-node-map
	   ("C-M-i" . completion-at-point))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; ensure the keymap is available
    (org-roam-db-autosync-mode)
    )
#+END_SRC

* Eye candy
** All the icons
#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

** Doom themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

** Doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1))

  ;; How tall the mode-line should be. It's only respected in GUI.
  ;; If the actual char height is larger, it respects the actual height.
  (setq doom-modeline-height 20)

  ;; How wide the mode-line bar should be. It's only respected in GUI.
  (setq doom-modeline-bar-width 3)

  ;; The limit of the window width.
  ;; If `window-width' is smaller than the limit, some information won't be displayed.
  (setq doom-modeline-window-width-limit fill-column)

  ;; How to detect the project root.
  ;; The default priority of detection is `ffip' > `projectile' > `project'.
  ;; nil means to use `default-directory'.
  ;; The project management packages have some issues on detecting project root.
  ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
  ;; to hanle sub-projects.
  ;; You can specify one if you encounter the issue.
  (setq doom-modeline-project-detection 'project)

  (setq doom-modeline-buffer-file-name-style 'auto)

  ;; Whether display icons in the mode-line.
  ;; While using the server mode in GUI, should set the value explicitly.
  (setq doom-modeline-icon (display-graphic-p))

  ;; Whether display the icon for `major-mode'. It respects `doom-modeline-icon'.
  (setq doom-modeline-major-mode-icon t)

  ;; Whether display the colorful icon for `major-mode'.
  ;; It respects `all-the-icons-color-icons'.
  (setq doom-modeline-major-mode-color-icon t)

  ;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
  (setq doom-modeline-buffer-state-icon t)

  ;; Whether display the modification icon for the buffer.
  ;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
  (setq doom-modeline-buffer-modification-icon t)

  ;; Whether display the minor modes in the mode-line.
  (setq doom-modeline-minor-modes t)

  ;; If non-nil, only display one number for checker information if applicable.
  (setq doom-modeline-checker-simple-format t)

  ;; The maximum number displayed for notifications.
  (setq doom-modeline-number-limit 99)

  ;; The maximum displayed length of the branch name of version control.
  (setq doom-modeline-vcs-max-length 12)

  ;; Whether display the workspace name. Non-nil to display in the mode-line.
  (setq doom-modeline-workspace-name t)

  ;; Whether display the perspective name. Non-nil to display in the mode-line.
  (setq doom-modeline-persp-name t)

  ;; If non nil the default perspective name is displayed in the mode-line.
  (setq doom-modeline-display-default-persp-name nil)

  ;; If non nil the perspective name is displayed alongside a folder icon.
  (setq doom-modeline-persp-icon t)

  ;; Whether display the `lsp' state. Non-nil to display in the mode-line.
  (setq doom-modeline-lsp t)

  ;; Whether display the modal state icon.
  ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
  (setq doom-modeline-modal-icon t)

  ;; Whether display the environment version.
  (setq doom-modeline-env-version t)

#+end_src

** Sublime themes (programmer names)

#+BEGIN_SRC emacs-lisp
(use-package sublime-themes)
#+END_SRC

** Modus themes
#+begin_src emacs-lisp
  (use-package modus-themes)
#+end_src

** Keycast
#+begin_src emacs-lisp
  (use-package keycast :disabled)
#+end_src


** Iconcs for company: company-box
#+begin_src emacs-lisp
  (use-package company-box
    :hook (company-mode . company-box-mode)
    :after company-mode)
#+end_src

* Generic settings
** UI
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)  ; no menu bar
  (tool-bar-mode -1)  ; no tool bar
  (when (boundp 'scroll-bar-mode) ; no scroll bar
    (scroll-bar-mode -1))
  (add-to-list 'default-frame-alist '(fullscreen . maximized)) ; start maximized
  (setq inhibit-splash-screen t) ; no splash screen
  (setq visible-bell t) ; no audio bell
  (set-face-attribute 'default nil :font "Menlo" :height 140)
  (load-theme 'modus-operandi t)
  (column-number-mode) ; show col nr in mode line
  (global-hl-line-mode) ; highlight current line
  ;; (set -cursor-color 'orange)
  ;; (set-face-background hl-line-face "gray10")
#+END_SRC

** Preferences
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (show-paren-mode 1) ; highlight matching parenthesis
  (setq display-line-numbers 'relative)
#+end_src

* Emacs customizations
** Key rebinding
*** ibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

** Dired
#+begin_src emacs-lisp
  (setq delete-by-moving-to-trash t)
#+end_src

** Modeline
*** Control display of minor modes in the modeline: diminish
#+begin_src emacs-lisp
  (use-package diminish
    :after use-package)
#+end_src
** Better help: helpful
#+begin_src emacs-lisp
  (use-package helpful
    :diminish
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* Programming
** General config
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode) ; display line nr in code buffers
#+end_src
** Ergonomics
*** maintain indentation
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :diminish
    :config (global-aggressive-indent-mode -1))
#+end_src
*** rainbow parens
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** LISP dialects structural editing: lispy
#+begin_src emacs-lisp
  (use-package lispy
    :hook (emacs-lisp-mode-hook . (lambda () (lispy-mode 1))))
#+end_src
** Language Server Protocol
#+begin_src emacs-lisp
  (setq lsp-keymap-prefix "C-c l")

  (use-package lsp-mode
    :hook ((prog-mode . lsp)
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp
    :after flycheck)

  (use-package lsp-ui
    :commands lsp-ui-mode)

  (use-package lsp-treemacs
    :commands lsp-treemacs-errors-list
    :config (lsp-treemacs-sync-mode 1))

#+end_src

** Syntax checking: flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :diminish
    :init (global-flycheck-mode))
#+end_src
** Languages

*** Python
*** Scala

I had a lot of trouble making lsp and metals work.
Finally what did work was not having PGP installed because in order to install
metals, coursier-cli also needs to be installed and it's certificate is expired.

#+begin_src emacs-lisp
  (use-package scala-mode
    :interpreter
    ("scala" . scala-mode))

  (use-package sbt-mode
    :commands sbt-start sbt-command)

  (use-package lsp-metals
    :config (setq lsp-metals-treeview-show-when-views-received t))
#+end_src

*** Java
#+begin_src emacs-lisp
  (use-package lsp-java
    :hook (java-mode-hook . lsp))
#+end_src

*** Terraform
#+begin_src emacs-lisp
  (use-package terraform-mode
    :diminish)
#+end_src

** Debugging
#+begin_src emacs-lisp
  (use-package posframe) ; requires by dap

  (use-package dap-mode
    :hook
    (lsp-mode . dap-mode)
    (lsp-mode . dap-ui-mode))
#+end_src

* Tools
** Search
*** Ripgrep
Rg not supported by projectile, expects ripgrep
#+begin_src emacs-lisp
  (use-package ripgrep
    :diminish)
#+end_src
*** Ag (silver searcher)
#+begin_src emacs-lisp
  (use-package ag
    :diminish)
#+end_src
   
* Project tools
** Source control: magit

Forge doesn't work on Monterey, same sqlite issue as for Scala metals. However
switching to sqlite3 doesn't seem to help either.

#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-c g" . magit-status))

  (use-package forge
    :disabled
    :after magit
    :custom (forge-database-connector 'sqlite3))
#+end_src

** Working with repos: projectile
#+begin_src emacs-lisp
  (use-package projectile
    :bind ("C-c p" . projectile-command-map)
    :init (projectile-mode 1)
    :diminish)

  (setq projectile-completion-system 'ivy)
#+end_src

** Feedback for lines changed: git-gutter+
#+begin_src emacs-lisp
  (use-package git-gutter+
    :diminish
    :config (global-git-gutter+-mode))
#+end_src
* Typing productivity
** Modal subsequent commands: hydra
#+begin_src emacs-lisp
  (use-package hydra
    :diminish)
#+end_src
** Expand selection: expand-region
#+begin_src emacs-lisp
  (use-package expand-region
    :diminish
    :bind ("C-=" . er/expand-region))
#+end_src
* Convenience
#+BEGIN_SRC emacs-lisp
  (use-package google-this
    :diminish
  :config (google-this-mode 1))
#+END_SRC

* Packagesg to explore
- consult-dir
- popper
- dir-hacks
- general
- smerge
- live python      
- org-html-themes
- elpy
- web-mode
- noflet
- eglot
- magit evil
- restclient
- dumb-jump
- try
- auto-yasnippet
- org-msg
- smartparens
- silversearcher
- wgrep
- anzu
- fzf
- darkroom
- org-tree-slide
- emmet
- org-ql
- pcre2el
- olivetti
- virtualenvwrapper
- all-the-icons-dired
- dired-subtree
- dired-narrow
- iedit
- hydra
- git-timemachine
- try
- jedi
- hl-line+
- visual fill mode
- doct
- dashboard
* TODO Issues
- yasnippets snippets
- company-box
- diminish yas
